From aa848b9fe582e7e42771e6f46f9c93d98e2aa067 Mon Sep 17 00:00:00 2001
From: Carlos Gallegos <40046747+CharlyZest@users.noreply.github.com>
Date: Tue, 30 Nov 2021 19:18:26 -0600
Subject: [PATCH] Rebranding


diff --git a/api/src/main/java/net/md_5/bungee/api/CommandSender.java b/api/src/main/java/net/md_5/bungee/api/CommandSender.java
index d5888311..af0636de 100644
--- a/api/src/main/java/net/md_5/bungee/api/CommandSender.java
+++ b/api/src/main/java/net/md_5/bungee/api/CommandSender.java
@@ -89,4 +89,14 @@ public interface CommandSender
      * permissions
      */
     public Collection<String> getPermissions();
+
+    // Advocatus Start
+
+    /**
+     * Check if the executor is a player.
+     * @return If he is a player.
+     */
+    public boolean isPlayer();
+
+    // Advocatus End
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 684eb883..a604a52d 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -387,4 +387,20 @@ public interface ProxiedPlayer extends Connection, CommandSender
      * @return this player's {@link Scoreboard}
      */
     Scoreboard getScoreboard();
+
+    // Advocatus Start
+
+    /**
+     * Gets the version of the minecraft protocol used for a player connection.
+     * @return protocol version number.
+     */
+    int getVersion();
+
+    /**
+     * Evaluates whether or not the player can support messages with RGB colors, for this it verifies the version of the minecraft protocol used by the connection.
+     * @return if a player uses a version with RGB support.
+     */
+    boolean supportsRGB();
+
+    // Advocatus End
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Command.java b/api/src/main/java/net/md_5/bungee/api/plugin/Command.java
index b4566327..771df017 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Command.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Command.java
@@ -66,4 +66,16 @@ public abstract class Command
     {
         return permission == null || permission.isEmpty() || sender.hasPermission( permission );
     }
+    
+    // Advocatus Start
+
+    /**
+     * Check if sender is player.
+     *
+     * @param sender the sender to check
+     * @return if is player or not.
+     * */
+    public boolean isPlayer(CommandSender sender) { return sender instanceof net.md_5.bungee.api.connection.ProxiedPlayer; }
+
+    // Advocatus End
 }
diff --git a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
index a4516ed9..7a7e6ad9 100644
--- a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
+++ b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
@@ -7,8 +7,8 @@ public class Bootstrap
     {
         if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 52.0 )
         {
-            System.err.println( "*** ERROR *** Waterfall requires Java 8 or above to function! Please download and install it!" );
-            System.out.println( "You can check your Java version with the command: java -version" );
+            System.err.println( "*** ERROR *** ¡Advocatus requiere Java 8 o superior para funcionar! ¡Descárguelo e instálelo!" );
+            System.out.println( "Puede verificar su versión de Java ejecutando el comando: \"java -version\" en la terminal." );
             return;
         }
 
diff --git a/module/pom.xml b/module/pom.xml
index bd5df19e..8cb6cd90 100644
--- a/module/pom.xml
+++ b/module/pom.xml
@@ -29,7 +29,7 @@
     </modules>
 
     <properties>
-        <module.author>RDT</module.author>
+        <module.author>RoyalMind Development Team</module.author>
         <maven.deploy.skip>true</maven.deploy.skip>
         <maven.javadoc.skip>true</maven.javadoc.skip>
     </properties>
diff --git a/pom.xml b/pom.xml
index 6ebb77a3..84243548 100644
--- a/pom.xml
+++ b/pom.xml
@@ -132,6 +132,12 @@
             <version>${lombok.version}</version>
             <scope>provided</scope>
         </dependency>
+        <dependency>
+            <groupId>net.royalmind.minecraft.library</groupId>
+            <artifactId>Colorizer</artifactId>
+            <version>1.0.2-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
     </dependencies>
 
     <build>
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index bafef27c..77b863e1 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -357,10 +357,10 @@ public abstract class DefinedPacket
     // Waterfall start: Additional DoS mitigations, courtesy of Velocity
     private static final OverflowPacketException STRING_TOO_LONG_EXCEPTION
             = new OverflowPacketException("A string was longer than allowed. For more "
-            + "information, launch Waterfall with -Dwaterfall.packet-decode-logging=true");
+            + "information, launch Advocatus with -Dwaterfall.packet-decode-logging=true");
     private static final OverflowPacketException STRING_TOO_MANY_BYTES_EXCEPTION
             = new OverflowPacketException("A string had more data than allowed. For more "
-            + "information, launch Waterfall with -Dwaterfall.packet-decode-logging=true");
+            + "information, launch Advocatus with -Dwaterfall.packet-decode-logging=true");
 
     public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
         return -1;
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index ac83e325..09408157 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -105,13 +105,13 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
     // Cached Exceptions:
     private static final CorruptedFrameException PACKET_LENGTH_OVERSIZED =
             new CorruptedFrameException("A packet could not be decoded because it was too large. For more "
-                    + "information, launch Waterfall with -Dwaterfall.packet-decode-logging=true");
+                    + "information, launch Advocatus with -Dwaterfall.packet-decode-logging=true");
     private static final CorruptedFrameException PACKET_LENGTH_UNDERSIZED =
             new CorruptedFrameException("A packet could not be decoded because it was smaller than allowed. For more "
-                    + "information, launch Waterfall with -Dwaterfall.packet-decode-logging=true");
+                    + "information, launch Advocatus with -Dwaterfall.packet-decode-logging=true");
     private static final BadPacketException PACKET_NOT_READ_TO_END =
             new BadPacketException("Couldn't read all bytes from a packet. For more "
-                    + "information, launch Waterfall with -Dwaterfall.packet-decode-logging=true");
+                    + "information, launch Advocatus with -Dwaterfall.packet-decode-logging=true");
 
 
     private void doLengthSanityChecks(ByteBuf buf, DefinedPacket packet,
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 9ef2b77a..5b45d2a6 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -188,7 +188,7 @@ public class BungeeCord extends ProxyServer
     public BungeeCord() throws IOException
     {
         // Java uses ! to indicate a resource inside of a jar/zip/other container. Running Bungee from within a directory that has a ! will cause this to muck up.
-        Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use Waterfall in directory with ! in path." );
+        Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use Advocatus in directory with ! in path." );
 
         try
         {
@@ -499,7 +499,7 @@ public class BungeeCord extends ProxyServer
                     } catch (InterruptedException ignored) {}
         }
 
-        getLogger().info( "Thank you and goodbye" );
+        getLogger().info( "Muy bien apreciable persona, gracias por tu preferncia. Te me cuidas, un beso en la pantunfla :*" );
         // Need to close loggers after last message!
         org.apache.logging.log4j.LogManager.shutdown(); // Waterfall
 
@@ -536,7 +536,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public String getName()
     {
-        return "Waterfall";
+        return "Advocatus";
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index 0db3d76a..88b3ab13 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -53,17 +53,17 @@ public class BungeeCordLauncher
             deadline.add( Calendar.WEEK_OF_YEAR, -8 );
             if ( buildDate.before( deadline.getTime() ) )
             {
-                System.err.println( "*** Hey! This build is potentially outdated :( ***" );
-                System.err.println( "*** Please check for a new build from https://papermc.io/downloads ***" );
-                System.err.println( "*** Should this build be outdated, you will get NO support for it. ***" );
-                System.err.println( "*** Server will start in 10 seconds ***" );
+                System.err.println( "*** ¡Oye! Esta compilación está potencialmente desactualizada :( ***" );
+                System.err.println( "*** Comprueba si hay una nueva compilación en https://github.com/RoyalMind/Advocatus/actions ***" );
+                System.err.println( "*** Si esta compilación está desactualizada, NO obtendrás soporte para ella. ***" );
+                System.err.println( "*** El servidor se iniciará en 10 segundos ***" );
                 Thread.sleep( TimeUnit.SECONDS.toMillis( 10 ) );
             }
         }
 
         BungeeCord bungee = new BungeeCord();
         ProxyServer.setInstance( bungee );
-        bungee.getLogger().info( "Enabled Waterfall version " + bungee.getVersion() );
+        bungee.getLogger().info( "Enabled Advocatus version " + bungee.getVersion() );
         bungee.start();
 
         if ( !options.has( "noconsole" ) )
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index b44d13e5..396bc8ea 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -786,4 +786,12 @@ public final class UserConnection implements ProxiedPlayer
         return entityRewrite == net.md_5.bungee.entitymap.EntityMap_Dummy.INSTANCE;
     }
     // Waterfall end
+    
+    // Advocatus start
+
+    public int getVersion() { return this.getPendingConnection().getVersion(); }
+    public boolean supportsRGB() { return this.getVersion() >= 735; }
+    public boolean isPlayer() { return true; }
+
+    // Advocatus end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
index b26035cf..d7acff31 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
@@ -16,6 +16,10 @@ public class CommandBungee extends Command
     @Override
     public void execute(CommandSender sender, String[] args)
     {
-        sender.sendMessage( ChatColor.BLUE + "This server is running Waterfall version " + ProxyServer.getInstance().getVersion() + " by md_5" );
+        sender.sendMessage(ChatColor.translateAlternateColorCodes('&',"&aThis server is running &c" +
+                ProxyServer.getInstance().getName() +
+                "&a version &c " +
+                ProxyServer.getInstance().getVersion() +
+                "&a by &emd_5 &a& &eRoyalMind Development Team"));
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index 720d0c3b..7b0dacd8 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -23,7 +23,7 @@ public class CommandReload extends Command
         BungeeCord.getInstance().startListeners();
         BungeeCord.getInstance().getPluginManager().callEvent( new ProxyReloadEvent( sender ) );
 
-        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "Waterfall has been reloaded."
-                + " This is NOT advisable and you will not be supported with any issues that arise! Please restart Waterfall ASAP." );
+        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "\n\n\n\nAdvocatus ha sido recargado."
+                + " ¡Esto NO es aconsejable y no recibirá asistencia con los problemas que surjan! Reinicie Advocatus lo antes posible.\n\n\n\n" );
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java b/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java
index 33d7e5bb..02aa3236 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java
@@ -87,4 +87,11 @@ public final class ConsoleCommandSender implements CommandSender
     {
         return Collections.emptySet();
     }
+    
+    // Advocatus Start
+
+    @Override
+    public boolean isPlayer() { return false; }
+
+    // Advocatus End
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index 0dd69778..06e149fd 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -227,7 +227,7 @@ public class YamlConfig implements ConfigurationAdapter
             Map<String, Object> val = entry.getValue();
             String name = entry.getKey();
             String addr = get( "address", "localhost:25565", val );
-            String motd = ChatColor.translateAlternateColorCodes( '&', get( "motd", "&1Just another Waterfall - Forced Host", val ) );
+            String motd = ChatColor.translateAlternateColorCodes( '&', get( "motd", "&1Just another Advocatus - Forced Host", val ) );
             boolean restricted = get( "restricted", false, val );
             SocketAddress address = Util.getAddr( addr );
             ServerInfo info = ProxyServer.getInstance().constructServerInfo( name, address, motd, restricted );
@@ -253,7 +253,7 @@ public class YamlConfig implements ConfigurationAdapter
 
         for ( Map<String, Object> val : base )
         {
-            String motd = get( "motd", "&1Another Bungee server", val );
+            String motd = get( "motd", "&1Another Advocatus server", val );
             motd = ChatColor.translateAlternateColorCodes( '&', motd );
 
             int maxPlayers = get( "max_players", 1, val );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 975b6996..4ba1e056 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -775,4 +775,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             brandMessage = input;
         }
     }
+    
+    // Advocatus start
+
+    public boolean supportsRGB() { return this.getVersion() >= 735; }
+
+    // Advocatus end
 }
-- 
2.37.1.windows.1

