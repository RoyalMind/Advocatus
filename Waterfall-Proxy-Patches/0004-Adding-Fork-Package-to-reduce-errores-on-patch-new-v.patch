From db3e04a7e67af743c2e421da91dae2571cae8507 Mon Sep 17 00:00:00 2001
From: Carlos Gallegos <40046747+CharlyZest@users.noreply.github.com>
Date: Fri, 29 Oct 2021 23:42:36 -0500
Subject: [PATCH] Adding Fork Package to reduce errores on patch new versions.


diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 15775e26..c804ee94 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -93,13 +93,13 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
+import net.royalmind.minecraft.software.advocatus.Advocatus;
 
 /**
  * Main BungeeCord proxy class.
  */
 public class BungeeCord extends ProxyServer
 {
-
     /**
      * Current operation state.
      */
@@ -113,7 +113,6 @@ public class BungeeCord extends ProxyServer
      * Localization bundle.
      */
     private ResourceBundle baseBundle;
-    private ResourceBundle customBundle;
     public EventLoopGroup bossEventLoopGroup, workerEventLoopGroup;
     /**
      * locations.yml save thread.
@@ -170,6 +169,7 @@ public class BungeeCord extends ProxyServer
             .registerTypeAdapter( SelectorComponent.class, new SelectorComponentSerializer() )
             .registerTypeAdapter( ServerPing.PlayerInfo.class, new PlayerInfoSerializer() )
             .registerTypeAdapter( Favicon.class, Favicon.getFaviconTypeAdapter() ).create();
+
     @Getter
     private ConnectionThrottle connectionThrottle;
     private final ModuleManager moduleManager = new ModuleManager();
@@ -539,7 +539,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public String getName()
     {
-        return "Advocatus";
+        return Advocatus.getInstance().getName();
     }
 
     @Override
@@ -548,35 +548,10 @@ public class BungeeCord extends ProxyServer
         return ( BungeeCord.class.getPackage().getImplementationVersion() == null ) ? "unknown" : BungeeCord.class.getPackage().getImplementationVersion();
     }
 
-    public void reloadMessages()
-    {
-        File file = new File( "messages.properties" );
-        if ( file.isFile() )
-        {
-            try ( FileReader rd = new FileReader( file ) )
-            {
-                customBundle = new PropertyResourceBundle( rd );
-            } catch ( IOException ex )
-            {
-                getLogger().log( Level.SEVERE, "Could not load custom messages.properties", ex );
-            }
-        }
-    }
+    public void reloadMessages() { Advocatus.getInstance().loadCustomBundle(); }
 
     @Override
-    public String getTranslation(String name, Object... args)
-    {
-        String translation = "<translation '" + name + "' missing>";
-        try
-        {
-            final String string = customBundle != null && customBundle.containsKey( name ) ? customBundle.getString( name ) : baseBundle.getString( name );
-
-            translation = ( args.length == 0 ) ? string : MessageFormat.format( string, args );
-        } catch ( MissingResourceException ex )
-        {
-        }
-        return translation;
-    }
+    public String getTranslation(String name, Object... args) { return Advocatus.getInstance().getTranslation(name, args); }
 
     @Override
     @SuppressWarnings("unchecked")
@@ -813,4 +788,10 @@ public class BungeeCord extends ProxyServer
     {
         return new BungeeTitle();
     }
+
+    /* Advocatus Start */
+
+    public ResourceBundle getBaseBundle() { return baseBundle; }
+
+    /* Advocatus End */
 }
diff --git a/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/Advocatus.java b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/Advocatus.java
new file mode 100644
index 00000000..c7dcaeaa
--- /dev/null
+++ b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/Advocatus.java
@@ -0,0 +1,71 @@
+package net.royalmind.minecraft.software.advocatus;
+
+import java.io.File;
+import java.text.MessageFormat;
+import java.util.Enumeration;
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+
+import de.leonhard.storage.Yaml;
+import net.md_5.bungee.BungeeCord;
+import net.royalmind.minecraft.software.advocatus.util.Logger;
+
+public class Advocatus
+{
+    private static Advocatus INSTANCE;
+    private final String FORK_NAME = "Advocatus";
+
+    private ResourceBundle baseMessages;
+    private Yaml customMessages;
+    public final String baseConfigDir = FORK_NAME + "/";
+
+    public Advocatus()
+    {
+        INSTANCE = this;
+        baseMessages = BungeeCord.getInstance().getBaseBundle();
+    }
+
+    public void loadCustomBundle()
+    {
+        try
+        {
+            File file = new File( baseConfigDir, "messages.yml" );
+            customMessages = new Yaml(file.getName(), baseConfigDir);
+            if (!file.exists())
+            {
+                try
+                {
+                    file.mkdir();
+                    final Enumeration<String> keys = baseMessages.getKeys();
+                    while (keys.hasMoreElements())
+                    {
+                        final String key = keys.nextElement();
+                        customMessages.set(key, baseMessages.getString(key));
+                    }
+                }
+                catch (Exception ex) { ex.printStackTrace(); }
+            }
+        }
+        catch (Exception ex) { Logger.error("Could not load custom messages.yml for advocatus", ex); }
+    }
+
+    public String getTranslation(String name, Object... args)
+    {
+        String translation = "<translation '" + name + "' missing>";
+        try
+        {
+            final String string = customMessages != null && customMessages.contains( name )
+                    ? customMessages.getString( name )
+                    : baseMessages.getString( name );
+
+            translation = ( args.length == 0 ) ? string : MessageFormat.format( string, args );
+
+        } catch ( MissingResourceException ex ) { Logger.error("Fallo al cargar la traduccion de: \""+ name +"\"", ex); }
+
+        return translation;
+    }
+
+    public String getName() { return FORK_NAME; }
+
+    public static Advocatus getInstance() { return INSTANCE == null ? new Advocatus() : INSTANCE; }
+}
diff --git a/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/config/ConfigValue.java b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/config/ConfigValue.java
new file mode 100644
index 00000000..8b5632d6
--- /dev/null
+++ b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/config/ConfigValue.java
@@ -0,0 +1,10 @@
+package net.royalmind.minecraft.software.advocatus.config;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target({ ElementType.METHOD, ElementType.FIELD })
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ConfigValue { String value(); }
diff --git a/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/config/Settings.java b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/config/Settings.java
new file mode 100644
index 00000000..3241012f
--- /dev/null
+++ b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/config/Settings.java
@@ -0,0 +1,16 @@
+package net.royalmind.minecraft.software.advocatus.config;
+
+public class Settings
+{
+    @ConfigValue("version")
+    public static int VERSION;
+
+    @ConfigValue("debug")
+    public static boolean DEBUGMODE;
+
+    static
+    {
+        Settings.VERSION = 1;
+        Settings.DEBUGMODE = true;
+    }
+}
diff --git a/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/util/Logger.java b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/util/Logger.java
new file mode 100644
index 00000000..2a51b6a9
--- /dev/null
+++ b/proxy/src/main/java/net/royalmind/minecraft/software/advocatus/util/Logger.java
@@ -0,0 +1,97 @@
+package net.royalmind.minecraft.software.advocatus.util;
+
+import java.util.logging.Level;
+
+import net.md_5.bungee.BungeeCord;
+import net.royalmind.minecraft.library.colorizer.Colorizer;
+import net.royalmind.minecraft.software.advocatus.config.Settings;
+
+public class Logger
+{
+    public static java.util.logging.Logger logger;
+
+    /*
+     * Registra un mensaje de informaci√≥n en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void info(final String texto, final Object... array)
+    {
+        final String[] split = String.format(texto, array).split("\n");
+
+        for (int length = split.length, i = 0; i < length; ++i)
+        {
+            Logger.logger.info(Colorizer.translate("" + split[i]));
+        }
+    }
+
+    /*
+     * Registra un mensaje de advertencia en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void warn(final String texto, final Object... array)
+    {
+        final String[] split = String.format(texto, array).split("\n");
+
+        for (int length = split.length, i = 0; i < length; ++i)
+        {
+            Logger.logger.warning(Colorizer.translate("" + split[i]));
+        }
+    }
+
+    /*
+     * Registra un mensaje de error grave en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void severe(final String texto, final Object... array)
+    {
+        final String[] split = String.format(texto, array).split("\n");
+
+        for (int length = split.length, i = 0; i < length; ++i) {
+            Logger.logger.severe(Colorizer.translate("" + split[i]));
+        }
+    }
+
+    /*
+     * Registra un mensaje de error en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void error(final String texto, final Object... array)
+    {
+        final String[] split = String.format(texto, array).split("\n");
+
+        for (int length = split.length, i = 0; i < length; ++i)
+        {
+            info("&c[ERROR] &r%s", split[i]);
+        }
+    }
+    /*
+     * Registra un mensaje de error en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void error(final String texto, final Exception exception)
+    {
+        logger.log(Level.SEVERE, Colorizer.translate("&c[ERROR] &r" + texto + "\t&cDetalle: " + exception.toString()));
+    }
+
+    /*
+     * Registra un mensaje de depuraci√≥n en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void debug(final String texto, final Object... array)
+    {
+        if (Settings.DEBUGMODE) { info(String.format(texto, array), new Object[0]); }
+    }
+
+    /*
+     * Registra un mensaje de depuraci√≥n en el log.
+     * @param texto Mensaje informativo.
+     */
+    public static void debugError(final String texto, final Object... array)
+    {
+        if (Settings.DEBUGMODE) { error(String.format(texto, array), new Object[0]); }
+    }
+
+    public static String getLine() { return Colorizer.translate("&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a=&e-&a="); }
+
+    static { Logger.logger = BungeeCord.getInstance().getLogger(); }
+}
-- 
2.33.0.windows.2

